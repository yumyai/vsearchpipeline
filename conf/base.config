/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/vsearchpipeline Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/
process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 15.m  * task.attempt, 'time'    ) }
    }
    withLabel:process_single_low {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_single_med {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 15.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_single_high {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_multi_verylow {
        cpus   = { check_max( 2                  , 'cpus'    ) }
        memory = { check_max( 0.5.GB * task.attempt, 'memory') }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_multi_low {
        cpus   = { check_max( 4                  , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory') }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_multi_med {
        cpus   = { check_max( 4                  , 'cpus'    ) }
        memory = { check_max( 15.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_highcpu {
        cpus   = { check_max( 20                  , 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_multi_high {
        cpus   = { check_max( 4                   , 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'     ) }
    }
    withLabel:process_multi_long {
        cpus   = { check_max( 4                     , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 10.h  * task.attempt   , 'time'     ) }
    }
    withLabel:process_mem_med {
        cpus   = { check_max( 8                     , 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 3.h  * task.attempt   , 'time'     ) }
    }
 

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 5
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}
